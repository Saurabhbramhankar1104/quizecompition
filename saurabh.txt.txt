SESSION 1
Q1. What is a “version control System”?
Version control systems are a category of software tools that helps record changes to files by keeping a track of modifications done to the code.
?	A repository: It can be thought as a database of changes. It contains all the edits and historical versions (snapshots) of the project.
?	Copy of Work (sometimes called as checkout): It is the personal copy of all the files in a project. You can edit to this copy, without affecting the work of others and you can finally commit your changes to a repository when you are done making your changes.


Q2. What are the types Version Control Systems:

Types of Version Control Systems:
?	Local Version Control Systems
?	Centralized Version Control Systems
?	Distributed Version Control Systems
Local Version Control Systems: It is one of the simplest forms and has a database that kept all the changes to files under revision control. RCS is one of the most common VCS tools. It keeps patch sets (differences between files) in a special format on disk. By adding up all the patches it can then re-create what any file looked like at any point in time.
Centralized Version Control Systems: Centralized version control systems contain just one repository and each user gets their own working copy. You need to commit to reflecting your changes in the repository. It is possible for others to see your changes by updating.
Two things are required to make your changes visible to others which are:
?	You commit
?	They update

The benefit of CVCS (Centralized Version Control Systems) makes collaboration amongst developers along with providing an insight to a certain extent on what everyone else is doing on the project. It allows administrators to fine-grained control over who can do what.
It has some downsides as well which led to the development of DVS. The most obvious is the single point of failure that the centralized repository represents if it goes down during that period collaboration and saving versioned changes is not possible. What if the hard disk of the central database becomes corrupted, and proper backups haven’t been kept? You lose absolutely everything.
Distributed Version Control Systems: Distributed version control systems contain multiple repositories. Each user has their own repository and working copy. Just committing your changes will not give others access to your changes. This is because commit will reflect those changes in your local repository and you need to push them in order to make them visible on the central repository. Similarly, When you update, you do not get other’s changes unless you have first pulled those changes into your repository.
To make your changes visible to others, 4 things are required:
?	You commit
?	You push
?	They pull
?	They update
The most popular distributed version control systems are Git, Mercurial. They help us overcome the problem of single point of failure.
Q3. What is the Purpose of Version Control system

?	Multiple people can work simultaneously on a single project. Everyone works on and edits their own copy of the files and it is up to them when they wish to share the changes made by them with the rest of the team.
?	It also enables one person to use multiple computers to work on a project, so it is valuable even if you are working by yourself.
?	It integrates the work that is done simultaneously by different members of the team. In some rare case, when conflicting edits are made by two people to the same line of a file, then human assistance is requested by the version control system in deciding what should be done.
?	Version control provides access to the historical versions of a project. This is insurance against computer crashes or data loss. If any mistake is made, you can easily roll back to a previous version. It is also possible to undo specific edits that too without losing the work done in the meanwhile. It can be easily known when, why, and by whom any part of a file was edited.
Q4. Mention the various Git repository hosting functions.
Github
Gitlab
Bitbucket
SourceForge
GitEnterprise
Q5. What is the use of SVN?
Subversion is an open-source versioning system. It keeps the repository of every change made to code files or any other files in a system. This system also manages the additions or deletions made. Use of this system is that it provides all the details of a person who made changes to source code. Useful in projects where multiple people work on the same code base.
Q6. Explain the version control tool git.
Git is one of the best version control tools that is available in the present market.
Features
?	Provides strong support for non-linear development.
?	Distributed repository model.
?	Compatible with existing systems and protocols like HTTP, FTP, ssh.
?	Capable of efficiently handling small to large sized projects.
?	Cryptographic authentication of history.
?	Pluggable merge strategies.
?	Toolkit-based design.
?	Periodic explicit object packing.
?	Garbage accumulates until collected.
Pros
?	Super-fast and efficient performance.
?	Cross-platform
?	Code changes can be very easily and clearly tracked.
?	Easily maintainable and robust.
?	Offers an amazing command line utility known as git bash.
?	Also offers GIT GUI where you can very quickly re-scan, state change, sign off, commit & push the code quickly with just a few clicks.
Cons
?	Complex and bigger history log become difficult to understand.
?	Does not support keyword expansion and timestamp preservation.
Open Source: Yes
Cost: Free

Q7. Explain the version control tool CVS.
It is yet another most popular revision control system. CVS has been the tool of choice for a long time.
Features
?	Client-server repository model.
?	Multiple developers might work on the same project parallelly.
?	CVS client will keep the working copy of the file up-to-date and requires manual intervention only when an edit conflict occurs
?	Keeps a historical snapshot of the project.
?	Anonymous read access.
?	‘Update’ command to keep local copies up to date.
?	Can uphold different branches of a project.
?	Excludes symbolic links to avoid a security risk.
?	Uses delta compression technique for efficient storage.
Pros
?	Excellent cross-platform support.
?	Robust and fully-featured command-line client permits powerful scripting
?	Helpful support from vast CVS community
?	allows good web browsing of the source code repository
?	It’s a very old, well known & understood tool.
?	Suits the collaborative nature of the open-source world splendidly.
Cons
?	No integrity checking for source code repository.
?	Does not support atomic check-outs and commits.
?	Poor support for distributed source control.
?	Does not support signed revisions and merge tracking.
Open Source: Yes
Cost: Free

Q8. Explain the version control tool RCS.
Revision Control system (RCS), developed by Thien-Thi Nguyen works on the local repository model and supports Unix-like platforms. RCS is a very old tool and was first released in 1982. It is an early version of VCS(Version Control System).
Features:
?	Was originally intended for programs, but, is also helpful for text documents or config files that often get revised.
?	RCS can be considered as a set of Unix Commands that permits various users to build and maintain program code or documents.
?	Allows revision of documents, committing changes and merging docs together.
?	Store revisions in a tree structure.
Pros
?	Simple architecture
?	Easy to work with
?	It has local repository model, so the saving of revisions is independent of the central repository.
Cons
?	Less security, version history is editable.
?	At a time, only one user can work on the same file.
Open Source: Yes
Cost: Free

Q9. Explain the version control tool TFS.
TFS, an acronym for team foundation server is a version control product by Microsoft. It is based on client-server, distributed repository model and has a proprietary license. It provides Windows, cross-platform OS support through Visual Studio Team Services (VSTS).
Features
?	Provides entire application lifecycle support including source code management, project management, reporting, automated builds, testing, release management and requirement management.
?	Empowers DevOps capabilities.
?	Can be used as a backend for several IDEs.
?	Available in two different forms (on-premises and online (known as VSTS)).
Pros
?	Easy administration. Familiar interfaces and tight integration with other Microsoft products.
?	Allows continuous integration, the team builds and unit test integration.
?	Great support for branching and merging operations.
?	Custom check-in policies to aid in implementing a steady & stable codebase in your source control.
Cons
?	Frequent merge conflicts.
?	Connection to the central repository is always required.
?	Quite slow in performing a pull, check-in, and branching operations.
Open Source: No
Cost: Free of cost for up to 5 users in the VSTS or for open source projects via codeplex.com; else paid and licensed through MSDN subscription or direct buy.

Q10.Difference between git, mercurial, SVN, CVS version control tool.
 

SESSION 2
DEMONSTRATE THE FOLLOWING STAGES OF GIT
1.git init
Usage: git init [repository name]
 This command is used to start a new repository.
 
2. git clone
Usage: git clone [url]  
This command is used to obtain a repository from an existing URL.
 
3.git add
Usage: git add [file]  
This command adds a file to the staging area.
 
4.git commit
Usage: git commit -m “[ Type in the commit message]”  
This command records or snapshots the file permanently in the version history.
 
Usage: git commit -a  
This command commits any files you’ve added with the git add command and also commits any files you’ve changed since then.

 
5.git diff
 
Usage: git diff [first branch] [second branch]  
This command shows the differences between the two branches mentioned.
 
6. git reset
Usage: git reset [file]  
This command unstages the file, but it preserves the file contents.
 
Usage: git reset [commit]  
This command undoes all the commits after the specified commit and preserves the changes locally.
 
Usage: git reset –hard [commit]  This command discards all history and goes back to the specified commit.
 
7. git status
Usage: git status  
This command lists all the files that have to be committed.
 
8. git rm
Usage: git rm [file]  
This command deletes the file from your working directory and stages the deletion.
 
9. git log
Usage: git log  
This command is used to list the version history for the current branch.
 
Usage: git log –follow[file]  
This command lists version history for a file, including the renaming of files also.
 
10. git show
Usage: git show [commit]  
This command shows the metadata and content changes of the specified commit.
